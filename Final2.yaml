AWSTemplateFormatVersion: 2010-09-09

Description: Stack

Parameters:
  LatestAmiId:
    Description: Region specific image from the Parameter Store
    Type: 'AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>'
    Default: '/aws/service/ami-amazon-linux-latest/al2023-ami-kernel-default-x86_64'

  DBUsername:
    Description: Database admin account username
    Type: String
    Default: admin

  DBPassword:
    Description: Database admin account password
    Type: String
    NoEcho: true

  DBName:
    Description: The name of the database
    Type: String
    Default: rdswordpress  

  TablePrefix:
    Type: String
    Default: "wp_"
    Description: "Prefix fÃ¶r WordPress-tabeller"



Resources:

  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: VPC


  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.1.0/24
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: PublicSubnet1

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.2.0/24
      AvailabilityZone: !Select [ 1, !GetAZs '' ]
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: PublicSubnet2

  PublicSubnet3:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.3.0/24
      AvailabilityZone: !Select [ 2, !GetAZs '' ]
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: PublicSubnet3


  InternetGateway:
    Type: AWS::EC2::InternetGateway


  VPCGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway


  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: PublicRouteTable


  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: VPCGatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway


  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet1
      RouteTableId: !Ref PublicRouteTable

  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet2
      RouteTableId: !Ref PublicRouteTable

  PublicSubnet3RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet3
      RouteTableId: !Ref PublicRouteTable

  ALBSEC:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow http 
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0  

  VMSEC:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow http 
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          SourceSecurityGroupId: !Ref ALBSEC
          
  


  PSSEC: 
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow SSH 
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0 


  RDSSEC:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow access to RDS
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 3306
          ToPort: 3306
          SourceSecurityGroupId: !Ref VMSEC
        - IpProtocol: tcp
          FromPort: 3306
          ToPort: 3306
          SourceSecurityGroupId: !Ref PSSEC
        
          



  EFSSEC:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: allow NFS
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 2049
          ToPort: 2049
          SourceSecurityGroupId: !Ref VMSEC
        - IpProtocol: tcp
          FromPort: 2049
          ToPort: 2049
          SourceSecurityGroupId: !Ref PSSEC
        


  LOADBALANCER:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: !Sub "${AWS::StackName}-ALB"
      Subnets:
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2
        - !Ref PublicSubnet3
      SecurityGroups:
        - !Ref ALBSEC
      Scheme: internet-facing
      Tags:
        - Key: Name
          Value: Loadbalancer


  TARGETGROUP:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: !Sub "${AWS::StackName}-TargetGroup"
      VpcId: !Ref VPC
      Port: 80
      Protocol: HTTP
      HealthCheckPath: /
      TargetType: instance
      Tags:
        - Key: Name
          Value: TargetGroup


  LBLISTENER:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref LOADBALANCER
      Port: 80
      Protocol: HTTP
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref TARGETGROUP


  EFS:
    Type: AWS::EFS::FileSystem
    Properties:
      PerformanceMode: generalPurpose  
      Encrypted: true


  EFSMountTarget1:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId: !Ref EFS
      SubnetId: !Ref PublicSubnet1
      SecurityGroups:
        - !Ref EFSSEC

  EFSMountTarget2:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId: !Ref EFS
      SubnetId: !Ref PublicSubnet2
      SecurityGroups:
        - !Ref EFSSEC

  EFSMountTarget3:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId: !Ref EFS
      SubnetId: !Ref PublicSubnet3
      SecurityGroups:
        - !Ref EFSSEC

  RDS:
    Type: AWS::RDS::DBInstance
    Properties:
      DBName: !Ref DBName
      DBInstanceIdentifier: !Ref DBName
      AllocatedStorage: 20
      DBInstanceClass: db.t4g.micro  
      Engine: mariadb
      EngineVersion: '10.11.9'
      MasterUsername: !Ref DBUsername  
      MasterUserPassword: !Ref DBPassword  
      VPCSecurityGroups:
        - !Ref  RDSSEC  
      DBSubnetGroupName: !Ref RDSSUBNET 
      MultiAZ: false  
      PubliclyAccessible: true  

  RDSSUBNET:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: "Subnet group for RDS"
      SubnetIds:
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2
        - !Ref PublicSubnet3


  PROVISIONSERVER:
    Type: AWS::EC2::Instance
    DependsOn: 
      - RDS
      - EFSMountTarget1
      - EFSMountTarget2
      - EFSMountTarget3
    Properties:
      ImageId: !Ref LatestAmiId
      InstanceType: t2.micro
      SecurityGroupIds:
        - !Ref PSSEC
      SubnetId: !Ref PublicSubnet1
      KeyName: DemoKey
      Tags:
      - Key: Name
        Value: "Provisionserver"   
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          set -e
          yum install -y amazon-efs-utils nfs-utils

          # Create mount point for EFS
          mkdir -p /var/www/html
          # Wait for EFS to be available and mount it
          for i in {1..10}; do
            if mount -t efs -o tls "${EFS}":/ /var/www/html; then
              echo "EFS mounted successfully."
              break
            fi
            echo "Waiting for EFS to become available..."
            sleep 5
          done
          # Add EFS to /etc/fstab to mount on reboot
          echo "${EFS}:/ /var/www/html efs _netdev,tls 0 0" >> /etc/fstab

          yum update -y
          yum install wget php-mysqlnd httpd php-fpm php-json php php-devel php-gd php-curl php-xml -y
          yum install httpd php-gd -y
          wget https://wordpress.org/latest.tar.gz
          tar -xzf latest.tar.gz
          cp wordpress/wp-config-sample.php wordpress/wp-config.php
          sed -i "s/'database_name_here'/'${DBName}'/g" wordpress/wp-config.php
          sed -i "s/'username_here'/'${DBUsername}'/g" wordpress/wp-config.php
          sed -i "s/'password_here'/'${DBPassword}'/g" wordpress/wp-config.php
          sed -i "s/'localhost'/'${RDS.Endpoint.Address}'/g" wordpress/wp-config.php

          cp -r wordpress/* /var/www/html/
          chown -R apache /var/www
          chgrp -R apache /var/www
          chmod 2775 /var/www
          sed -i  '151s/.*/AllowOverride All/' /etc/httpd/conf/httpd.conf
          systemctl start php-fpm
          systemctl enable php-fpm
          systemctl start httpd
          systemctl enable httpd

          
          

  LaunchTemplate:
    Type: 'AWS::EC2::LaunchTemplate'
    Properties:
      LaunchTemplateName: !Sub '${AWS::StackName}-LaunchTemplate'
      LaunchTemplateData:
        ImageId: !Ref LatestAmiId
        InstanceType: t2.micro
        KeyName: DemoKey
        SecurityGroupIds:
          - !GetAtt VMSEC.GroupId      
        UserData:   
          Fn::Base64: !Sub |
            #!/bin/bash
            set -e

      
            yum update -y
            yum install -y amazon-efs-utils nfs-utils httpd wget php-fpm php-mysqli php-json php php-devel

        
            mkdir -p /var/www/html
            # V??nta p?? att EFS ska bli tillg??ngligt och montera den
            for i in {1..10}; do
              if mount -t efs -o tls "${EFS}":/ /var/www/html; then
                echo "EFS monterat framg??ngsrikt."
                break
              fi
              echo "V??ntar p?? att EFS ska bli tillg??ngligt..."
              sleep 5
            done

            # L??gg till EFS i /etc/fstab s?? att den monteras vid omstart
            echo "${EFS}:/ /var/www/html efs _netdev,tls 0 0" >> /etc/fstab

            # Start Apache server
            systemctl start httpd
            systemctl enable httpd

          
  ASG:
    Type: AWS::AutoScaling::AutoScalingGroup
    DependsOn: 
      - EFSMountTarget1
      - EFSMountTarget2
      - EFSMountTarget3
      - RDS
      - PROVISIONSERVER
    Properties:
      LaunchTemplate:
        LaunchTemplateId: !Ref LaunchTemplate
        Version: !GetAtt LaunchTemplate.LatestVersionNumber
      MaxSize: '3'
      MinSize: '1'
      DesiredCapacity: '2'
      VPCZoneIdentifier: 
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2
        - !Ref PublicSubnet3
      TargetGroupARNs:
        - !Ref TARGETGROUP

Outputs:

  LoadbalancerDNS:
    Description: DNS name of the Load Balancer
    Value: !GetAtt LOADBALANCER.DNSName  
